!o


ask:		ld indexA
		sub indexA
		st indexA
		ld indexB
		sub indexB
		st indexB
		ld IndexColumn
		sub IndexColumn
		st IndexColumn
		ld indexD		
		sub indexD
		st indexD
		ldc msg1
		sout
		din
		jz end
		jnz matrixSize

matrixSize:	ldc msg2
		sout
		din
	        st n
		ld n
		st column
		ld n
		st row
		ld n
		st nKey
		ld n
 		push
		ld n
		mult
		st countA
		ld countA		
		st countB
		jnz storeA
		jz end

storeA:		ldc msg3
		sout
		din
		push
		ldc a
		add indexA
		sti
		ld indexA
		add one
		st indexA
		ld countA    
		sub one
		st countA
		jz storeB    
		ja storeA


storeB:		ldc msg4
		sout
		din
		push
		ldc b
		add indexB
		sti
		ld indexB
		add one
		st indexB
		ld countB
		sub one
		st countB
		ld countB
		jz resetIndex    
		jnz storeB

resetIndex: 	ld indexA
		sub indexA
		st indexA
		ld indexB
		sub indexB
		st indexB
		ld indexC
		sub indexC
		st indexC
		ld temp
		sub temp
		st temp
		ld n
		st nKey
		ld n
		st rowCount
		ld n
		st rowIndex
		ja rowMult

rowMult:	ldc a
		add indexA
		ldi
		push
		ld indexA
		add one
		st indexA
		ld nKey
		sub one
		st nKey
		ja columnMult

resetColumn:	ld rowCount
		sub one
		st rowCount
		ld rowCount
		jz resetRow
		ld indexA
		sub n
		st indexA
		ld n
		st nKey
		ld IndexColumn	
		add one
		st IndexColumn
		ld indexB
		sub indexB
		add IndexColumn
		st indexB
		ja rowMult

resetRow:	ld rowIndex
		sub one
		st rowIndex
		ld rowIndex
		jz display
		ld indexB
		sub indexB
		st indexB
		ld n
		st rowCount
		ld n
		st nKey
		ld IndexColumn
		sub IndexColumn
		st IndexColumn
		ja rowMult
		

columnMult:	ldc b
		add indexB
		ldi
		mult
		add temp
		st temp
		ld indexB
		add n
		st indexB
		ld nKey
		jz store
		ja rowMult

store:		ld temp
		push
		ldc c
		add indexC
		sti
		ld indexC
		add one
		st indexC
		ld temp
		sub temp
		st temp
		ja resetColumn

display:	ldc msg5
		sout
		ldc '\n'
		aout
		ja displayC

displayC:	ldc c 
		add indexD
		ldi
		dout
		ldc space
		sout
		ld indexD
		add one
		st indexD
		ld column
		sub one 
		st column
		jz rowDown
		jnz displayC
 		
rowDown:	ld n
		st column
		ldc '\n'
		aout
		ld row	
		sub one 
		st row
		jz ask
		jnz displayC


end:		halt


msg1: dw "Enter 1 if you have a problem to enter, and 0 if you're done: "
msg2: dw "What is the size of the matrix, number must be <= 1 && >= 10, enter zero to stop: "
msg3: dw "Enter matrix A input: "
msg4: dw "Enter matrix B input: "
msg5: dw "C = "
a: dw 100 dup 0
b: dw 100 dup 0
c: dw 100 dup 0
n: dw 0
nKey: dw 0
countA: dw 0
countB: dw 0
indexA: dw 0
indexB: dw 0
indexC: dw 0
indexD: dw 0
column: dw 0
row: dw 0
rowCount: dw 0
IndexColumn: dw 0
rowIndex: dw 0
one: dw 1
space: dw " "
temp: dw 0