!snew

		ldc msg0
		sout
		ldc '\n'
		aout
		ldc '\n'
		aout
		ja ask

reset:		ld @a
		st xlength
		st ylength
		st index
		ld @0
		st temp
		st xpoint
		st ypoint
		st yflag
		st xflag
		st zlength
		st zindex
		st zoutlength
		st carry
		st tempIndex
		st count
		ldc '\n'
		aout
		ja rxin

rxin:		ld @0
		push
		ldc xin
		add index
		sti
		ld index
		add one
		st index
		sub @50
		jz ryin
		ja rxin

ryin:		ld @0
		push
		ldc yin
		add temp
		sti
		ld temp
		add one
		st temp
		sub @50
		jz rx
		ja ryin

rx:		ld @0
		push
		ldc x
		add xflag
		sti
		ld xflag
		add one
		st xflag
		sub @50
		jz ry
		ja rx

ry:		ld @0
		push
		ldc y
		add yflag
		sti
		ld yflag
		add one
		st yflag
		sub @50
		jz rz
		ja ry

rz:		ld @0
		push
		ldc z
		add zlength
		sti
		ld zlength
		add one
		st zlength
		sub @50
		jz rzout
		ja rz

rzout:		ld @0
		push
		ldc zout
		add zoutlength
		sti
		ld zoutlength
		add one
		st zoutlength
		sub @50
		jz reset2
		ja rzout

reset2:		ld @a
		st xlength
		st ylength
		st index
		ld @0
		st temp
		st xpoint
		st ypoint
		st yflag
		st xflag
		st zlength
		st zindex
		st zoutlength
		st carry
		st tempIndex
		st count
		ja ask


ask:		ldc msg1
		sout
		ain
		st temp
		sub yes
		jz input
		ld temp
		sub no
		jz final

input: 		ldc msg2
		sout
		ldc xin
		sin
		ldc msg3
		sout
		ldc yin
		sin
		ja leadingZX

leadingZX:	ld index
		add one
		st index
		ldc xin
		add index
		ldi
		sub zero
		jnz sortX
		ja leadingZX

sortX:		ldc xin
		add index
		ldi
		jz reset4Y
		st temp
		sub neg
		jz flagX
		ld temp	
		sub p
		jz pointX
		ld temp
		sub @48
		push
		ld xlength
		add one
		st xlength
		ldc x
		add xlength
		sti
		ld index
		add one
		st index
		ja sortX
		
flagX:		ld one
		st xflag
		ja leadingZX

pointX:		ld index
		st tempIndex    
		ja lengthX

lengthX:	ldc xin
		add index
		ldi
		jz pX 
		ld index
		add one
		st index
		ja lengthX

pX:		ld index 
		sub one 
		st index  
		ja insertX

insertX:	ld tempIndex
		sub index
		jz reset4Y
		ldc xin
		add index
		ldi
		sub zero
		jnz pushX
		ld index
		sub one
		st index
		ja insertX

pushX:		ld index
		sub tempIndex
		jz popX
		ldc xin
		add index
		ldi
		push
		ld xpoint
		add one
		st xpoint
		ld xpoint
		st temp
		ld index
		sub one
		st index
		ja pushX

popX:		pop
		sub @48
		push
		ld temp
		sub one
		st temp
		ld xlength
		add one
		st xlength
		ldc x
		add xlength
		sti
		ld temp
		jz reset4Y
		ja popX

reset4Y:	ld index
		sub index
		sub one
		st index
		ld temp 
		sub temp
		st temp
		ld tempIndex
		sub tempIndex
		st tempIndex
		ja leadingZY

leadingZY:	ld index
		add one
		st index
		ldc yin
		add index
		ldi
		sub zero
		jnz sortY
		ja leadingZY

sortY:		ldc yin
		add index
		ldi
		jz setzlength
		st temp
		sub neg
		jz flagY
		ld temp	
		sub p
		jz pointY
		ld temp
		sub @48
		push
		ld ylength
		add one
		st ylength
		ldc y
		add ylength
		sti
		ld index
		add one
		st index
		ja sortY

flagY:		ld one
		st yflag
		ja leadingZY

pointY:		ld index
		st tempIndex 
		ja lengthY

lengthY:	ldc yin
		add index
		ldi
		jz pY
		ld index
		add one
		st index
		ja lengthY

pY:		ld index 
		sub one 
		st index 
		ja insertY

insertY:	ld tempIndex
		sub index
		jz setzlength
		ldc yin
		add index
		ldi
		sub zero
		jnz pushY
		ld index
		sub one
		st index
		ja insertY

pushY:		ld index
		sub tempIndex
		jz popY
		ldc yin
		add index
		ldi
		push
		ld ypoint
		add one
		st ypoint
		ld ypoint
		st temp
		ld index
		sub one
		st index
		ja pushY

popY:		pop
		sub @48
		push
		ld temp
		sub one
		st temp
		ld ylength
		add one
		st ylength
		ldc y
		add ylength
		sti
		ld temp
		jz setzlength
		ja popY

setzlength:	ld xlength
		add ylength
		add one
		st zlength
		ja setVars

setVars:	ld xlength
		st tempIndex
		ja calculate

calculate:	ldc y
		add ylength
		ldi
		push
		ja multi

multi:		ldc x
		add tempIndex
		ldi
		mul
		st temp
		ld tempIndex
		add ylength
		add one
		st index
		ldc z
		add index
		ldi
		add temp
		add carry
		push
		ld ten
		div_mod
		st carry
		ldc z
		add index
		sti
		ld tempIndex
		sub one
		jn setY
		st tempIndex
		ja calculate

setY:		ldc z
		add index
		sub one
		ldi
		add carry
		push
		ldc z
		add index
		sub one
		sti
		ld carry
		sub carry
		st carry
		ld ylength
		sub one
		jn reset4Z 
		st ylength
		ld xlength
		st tempIndex
		ja calculate

reset4Z:	ld index
		sub index
		st index
		ja checkN
	
checkN:		ld xflag
		add yflag
		push
		ld two
		div_mod
		pop
		jz leadingZZ
		ld neg
		push
		ldc zout
		add zindex
		sti
		ld zindex
		add one
		st zindex
		ja leadingZZ
	
leadingZZ:	ldc z
		add index
		ldi
		sub @0
		jnz storeZout
		ld index
		add one
		st index
		ja leadingZZ
	
storeZout:	ldc z
		add index
		ldi
		add @48
		st temp
		ld temp
		push
		ldc zout
		add zindex
		sti
		ld zlength
		sub index
		jz markP
		ld index
		add one
		st index
		ld zindex
		add one
		st zindex
		ja storeZout

zoutL:		ldc zout
		add zoutlength
		ldi
		jz storeIn
		ld zoutlength	
		add one
		st zoutlength
		ja zoutL	
		

markP:		ld xpoint
		add ypoint
		st xpoint
		jz display
		jnz zoutL

storeIn:	ld zoutlength
		sub xpoint
		st xpoint
		ld zoutlength
		sub one
		st temp
		ja stackP

stackP:		ldc zout
		add temp
		ldi
		push
		ld count
		add one
		st count
		ld xpoint
		sub temp
		jz pushDec
		ld temp
		sub one
		st temp
		ja stackP
		
pushDec:	ld p
		push
		ld count
		add one
		st count
		ja popP

popP:		ldc zout
		add temp
		sti
		ldc zout
		ld count
		sub one
		jz display
		st count
		ld temp
		add one
		st temp
		ja popP
				

display:	ld index	
		sub index
		st index
		ldc msg4
		sout
		ja display2

display2: 	ldc zout
		add index
		ldi
		jz reset
		aout
		ld index
		add one
		st index
		ja display2

final: 		halt

msg0: dw "Floating point multiplication. "
msg1: dw "Do you have a floating point multiplication problem. Enter y for yes, n for n: "
msg2: dw "Enter x: "
msg3: dw "Enter y: "
msg4: dw "The answer to your input is: "
temp: dw 0
xflag: dw 0
yflag: dw 0
xpoint: dw 0
ypoint: dw 0
xin: dw 100 dup 0
yin: dw 100 dup 0
zout: dw 100 dup 0
x: dw 100 dup 0
y: dw 100 dup 0
z: dw 100 dup 0
xlength: dw -1
ylength: dw -1
zlength: dw 0
zoutlength: dw 0
zindex: dw 0
count: dw 0
carry: dw 0
tempIndex: dw 0 
index: dw -1
neg: dw 45
p: dw 46
one: dw 1
yes: dw 121
no: dw 110
zero: dw 48
ten: dw 10
two: dw 2
@48: dw 48
@0: dw 0
@a: dw -1
@50: dw 100